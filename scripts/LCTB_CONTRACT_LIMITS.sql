CREATE OR REPLACE VIEW DEVV_STG_FLX.LCTB_CONTRACT_LIMITS_get_delta AS LOCKING ROW FOR ACCESS
SELECT
  COALESCE(X.CONTRACT_REF_NO, Y.CONTRACT_REF_NO) AS CONTRACT_REF_NO,
  COALESCE(X.CUSTOMER_NO, Y.CUSTOMER_NO) AS CUSTOMER_NO,
  COALESCE(X.EVENT_SEQ_NO, Y.EVENT_SEQ_NO) AS EVENT_SEQ_NO,
  COALESCE(X.LINKAGE_TYPE, Y.LINKAGE_TYPE) AS LINKAGE_TYPE,
  COALESCE(X.LINKED_REF_NO, Y.LINKED_REF_NO) AS LINKED_REF_NO,
  COALESCE(X.PARTY_TYPE, Y.PARTY_TYPE) AS PARTY_TYPE,
  COALESCE(X.VERSION_NO, Y.VERSION_NO) AS VERSION_NO,
  X.AMOUNT_TAG,
  X.BM_LINKED_CCY,
  X.BM_PARTY_TYPE_CONTRACT,
  X.BM_PARTY_TYPE_FACILITY,
  X.EVENT_CODE,
  X.JV_PARENT,
  X.LIABLITY_NO,
  X.LIMIT_AMOUNT,
  X.LINKAGE_PERCENTAGE,
  X.LINKAGE_SEQ_NO,
  X.LINKED_CCY,
  X.OPERATION,
  X.SK_CUSTOMER_NO,
  X.SK_LIABLITY_NO,
  X.SK_CONTRACT_REF_NO,
  COALESCE(X.ETL_START_DT, Y.ETL_START_DT) AS ETL_START_DT, /* -----NO_CHANGE----------- */
  X.ETL_END_DT,
  X.RECORD_DELETED_FLAG,
  X.PROCESS_NAME,
  X.UPDATE_PROCESS_NAME,
  X.EXT_SS_ID,
  X.EXE_PROCESS_ID,
  X.UPDATE_PROCESS_ID,
  COALESCE(X.ETL_START_TS, Y.ETL_START_TS) AS ETL_START_TS,
  X.ETL_END_TS,
  CASE
    WHEN Y.CONTRACT_REF_NO IS NULL
    AND Y.CUSTOMER_NO IS NULL
    AND Y.EVENT_SEQ_NO IS NULL
    AND Y.LINKAGE_TYPE IS NULL
    AND Y.LINKED_REF_NO IS NULL
    AND Y.PARTY_TYPE IS NULL
    AND Y.VERSION_NO IS NULL
    THEN 'INS' /* - IF MULTIPLE PKs are there then concatenate them with AND */
    WHEN X.CONTRACT_REF_NO = Y.CONTRACT_REF_NO
    AND X.CUSTOMER_NO = Y.CUSTOMER_NO
    AND X.EVENT_SEQ_NO = Y.EVENT_SEQ_NO
    AND X.LINKAGE_TYPE = Y.LINKAGE_TYPE
    AND X.LINKED_REF_NO = Y.LINKED_REF_NO
    AND X.PARTY_TYPE = Y.PARTY_TYPE
    AND X.VERSION_NO = Y.VERSION_NO /* - IF MULTIPLE PKs are there then concatenate them with AND */
    AND (
      (
        (
          X.AMOUNT_TAG IS NULL AND NOT Y.AMOUNT_TAG IS NULL
        )
        OR (
          NOT X.AMOUNT_TAG IS NULL AND Y.AMOUNT_TAG IS NULL
        )
        OR (
          X.AMOUNT_TAG <> Y.AMOUNT_TAG
        )
      )
      OR (
        (
          X.BM_LINKED_CCY IS NULL AND NOT Y.BM_LINKED_CCY IS NULL
        )
        OR (
          NOT X.BM_LINKED_CCY IS NULL AND Y.BM_LINKED_CCY IS NULL
        )
        OR (
          X.BM_LINKED_CCY <> Y.BM_LINKED_CCY
        )
      )
      OR (
        (
          X.BM_PARTY_TYPE_CONTRACT IS NULL AND NOT Y.BM_PARTY_TYPE_CONTRACT IS NULL
        )
        OR (
          NOT X.BM_PARTY_TYPE_CONTRACT IS NULL AND Y.BM_PARTY_TYPE_CONTRACT IS NULL
        )
        OR (
          X.BM_PARTY_TYPE_CONTRACT <> Y.BM_PARTY_TYPE_CONTRACT
        )
      )
      OR (
        (
          X.BM_PARTY_TYPE_FACILITY IS NULL AND NOT Y.BM_PARTY_TYPE_FACILITY IS NULL
        )
        OR (
          NOT X.BM_PARTY_TYPE_FACILITY IS NULL AND Y.BM_PARTY_TYPE_FACILITY IS NULL
        )
        OR (
          X.BM_PARTY_TYPE_FACILITY <> Y.BM_PARTY_TYPE_FACILITY
        )
      )
      OR (
        (
          X.EVENT_CODE IS NULL AND NOT Y.EVENT_CODE IS NULL
        )
        OR (
          NOT X.EVENT_CODE IS NULL AND Y.EVENT_CODE IS NULL
        )
        OR (
          X.EVENT_CODE <> Y.EVENT_CODE
        )
      )
      OR (
        (
          X.JV_PARENT IS NULL AND NOT Y.JV_PARENT IS NULL
        )
        OR (
          NOT X.JV_PARENT IS NULL AND Y.JV_PARENT IS NULL
        )
        OR (
          X.JV_PARENT <> Y.JV_PARENT
        )
      )
      OR (
        (
          X.LIABLITY_NO IS NULL AND NOT Y.LIABLITY_NO IS NULL
        )
        OR (
          NOT X.LIABLITY_NO IS NULL AND Y.LIABLITY_NO IS NULL
        )
        OR (
          X.LIABLITY_NO <> Y.LIABLITY_NO
        )
      )
      OR (
        (
          X.LIMIT_AMOUNT IS NULL AND NOT Y.LIMIT_AMOUNT IS NULL
        )
        OR (
          NOT X.LIMIT_AMOUNT IS NULL AND Y.LIMIT_AMOUNT IS NULL
        )
        OR (
          X.LIMIT_AMOUNT <> Y.LIMIT_AMOUNT
        )
      )
      OR (
        (
          X.LINKAGE_PERCENTAGE IS NULL AND NOT Y.LINKAGE_PERCENTAGE IS NULL
        )
        OR (
          NOT X.LINKAGE_PERCENTAGE IS NULL AND Y.LINKAGE_PERCENTAGE IS NULL
        )
        OR (
          X.LINKAGE_PERCENTAGE <> Y.LINKAGE_PERCENTAGE
        )
      )
      OR (
        (
          X.LINKAGE_SEQ_NO IS NULL AND NOT Y.LINKAGE_SEQ_NO IS NULL
        )
        OR (
          NOT X.LINKAGE_SEQ_NO IS NULL AND Y.LINKAGE_SEQ_NO IS NULL
        )
        OR (
          X.LINKAGE_SEQ_NO <> Y.LINKAGE_SEQ_NO
        )
      )
      OR (
        (
          X.LINKED_CCY IS NULL AND NOT Y.LINKED_CCY IS NULL
        )
        OR (
          NOT X.LINKED_CCY IS NULL AND Y.LINKED_CCY IS NULL
        )
        OR (
          X.LINKED_CCY <> Y.LINKED_CCY
        )
      )
      OR (
        (
          X.OPERATION IS NULL AND NOT Y.OPERATION IS NULL
        )
        OR (
          NOT X.OPERATION IS NULL AND Y.OPERATION IS NULL
        )
        OR (
          X.OPERATION <> Y.OPERATION
        )
      )
      OR (
        (
          X.SK_CUSTOMER_NO IS NULL AND NOT Y.SK_CUSTOMER_NO IS NULL
        )
        OR (
          NOT X.SK_CUSTOMER_NO IS NULL AND Y.SK_CUSTOMER_NO IS NULL
        )
        OR (
          X.SK_CUSTOMER_NO <> Y.SK_CUSTOMER_NO
        )
      )
      OR (
        (
          X.SK_LIABLITY_NO IS NULL AND NOT Y.SK_LIABLITY_NO IS NULL
        )
        OR (
          NOT X.SK_LIABLITY_NO IS NULL AND Y.SK_LIABLITY_NO IS NULL
        )
        OR (
          X.SK_LIABLITY_NO <> Y.SK_LIABLITY_NO
        )
      )
      OR (
        (
          X.SK_CONTRACT_REF_NO IS NULL AND NOT Y.SK_CONTRACT_REF_NO IS NULL
        )
        OR (
          NOT X.SK_CONTRACT_REF_NO IS NULL AND Y.SK_CONTRACT_REF_NO IS NULL
        )
        OR (
          X.SK_CONTRACT_REF_NO <> Y.SK_CONTRACT_REF_NO
        )
      )
    )
    THEN 'UPD'
    WHEN X.CONTRACT_REF_NO IS NULL
    AND X.CUSTOMER_NO IS NULL
    AND X.EVENT_SEQ_NO IS NULL
    AND X.LINKAGE_TYPE IS NULL
    AND X.LINKED_REF_NO IS NULL
    AND X.PARTY_TYPE IS NULL
    AND X.VERSION_NO IS NULL
    THEN 'DEL' /* - IF MULTIPLE PKs are there then concatenate them with AND */
  END AS OPT_FLAG
FROM DEVT_STG_FLX.LCTB_CONTRACT_LIMITS AS X
FULL JOIN DEVT_STG_FLX.LCTB_CONTRACT_LIMITS_BACKUP AS Y
  ON X.CONTRACT_REF_NO = Y.CONTRACT_REF_NO
  AND X.CUSTOMER_NO = Y.CUSTOMER_NO
  AND X.EVENT_SEQ_NO = Y.EVENT_SEQ_NO
  AND X.LINKAGE_TYPE = Y.LINKAGE_TYPE
  AND X.LINKED_REF_NO = Y.LINKED_REF_NO
  AND X.PARTY_TYPE = Y.PARTY_TYPE
  AND X.VERSION_NO = Y.VERSION_NO /* - IF MULTIPLE PKs are there then concatenate them with AND */
WHERE
  NOT OPT_FLAG IS NULL